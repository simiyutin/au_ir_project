{"h4": [], "h2": ["7 2017", "august 22 2016", "22 2015", "august 12 2015", "1 2015", "14 2015", "may 31 2015", "may 27 2015", "9 2015", "12 2015", "march 26 2014", "follow", "", "blog archiv", "subscrib", "follow", ""], "body": ["function attribut val function val fals els function val function id function var script var head head larg amount rang offic due work standard run capabl content frequent recent show one demo confer confer organ nice provid us grate meant ship larg heavi larg distanc usual one set one cowork experi deal type work demo go show special treatment suppos showcas advantag higher dynam bright rang art asset effort made make look beauti demo mani monitor stun see ugli demo look particular capabl occur would make chang art asset add tone mapper tune demo one make demo look good capabl assumpt demo still look good subset right also programm consid go solv problem least document enough therefor expect challeng output littl demo alreadi use mani monitor initi shock friendli person suggest go follow websit tune point occur capabl dozen slider sever hard time understand slider interact way go understand 5 make sure game run wide rang capabl consist everi game come handbook explain best set dozen possibl assum go exercis figur previou experi adjust gamma valu indic low adopt rate menu option give recommend like graphic card say game best use display expect user upgrad display game happen two game recommend differ display user need differ display main live room obvious exagger gamma invent gamma calibr test screen work well way color well mayb color wheel way guid user inclin work way menu option optim imag anyon alreadi thought post 520 pm comment 6209266595 300 250 execut summari built render system cluster cull filter triangl differ view like main view shadow view reflect view view etc time optim triangl use fill visibl buffer visibl buffer view render light shadow bounc light optim geometri base visibl differ visibl geometri shade frequenc light per triangl call object space pleas download post 348 pm comment wrote anoth blog entri perform consider resourc bind 12 post 249 pm comment someon cant find name websit provid implement pro 5 articl pretti cool post 415 pm comment year honor award tenth time row excit would like thank everyon support nomin last 10 year page lot thing year find way onto blog time busi thing leav much time blog also consid blog offer provid advic insight thing work spare time outsid confetti top confetti grow last six year program time includ spare time decreas gener give much time reflect happen ten year still tri understand dimens activ highli volatil industri like game industri 10 year obvious alreadi much longer industri 10 year ago new consol gener launch 360 consid launch major event two platform togeth consid main game devic next seven year two year later mobil game start take job chang mind support nativ program devic today devic like air 2 shield offer perform close 360 big consol manufactur seriou challeng compet mani mobil devic peopl alreadi home becam easi compani launch consol mani compani launch mini consol use advanc mobil part product model industri rapidli chang similar movi industri part industri move away monolith model larg game flexibl strike team hire compani like confetti come take care graphic tool instead group peopl perman staff task long time excit develop confetti feel like middl interest go one thing know becom better everi year alway strive make next year better previou year improv effici learn compani adjust strike team model unfortun develop last 10 year keep flood news larg layoff send press releas say reduc workforc reason like align expect budget lack success etc mani press releas express snide view treatment human remind darker time slaveri one unfortun develop share inform last 10 year inform share confer softwar patent attach case someon want implement obvious without know everi employe told allow read patent descript compani might pay futur system freeli share inform help develop succeed difficult technic implic turn upsid favor compani larg law unit willing develop help peer use compani secur futur econom advantag top compani like uniti other hard time engin concern violat variou patent therefor would run huge econom risk share sourc code apart strike team model excit develop new breed develop adjust new econom pressur store model make live new innov game pleasur work awesom experi feel creativ posit energi flow compani remind develop middl 90 call game industri boot big game reach million peopl new gener reach hundr million peopl could say third wave game develop first wave develop 80 second wave develop 90 post 1012 comment link show interest progress altern lost art c structur pack pictur show clearli effect apertur shutter speed imag constant buffer without constant pain what new sinc 80 affect programm faster adapt depth bia shadow map post 117 pm comment mani render solut exampl battlefield simul util hardwar solut multipl consum idea split comput power 4 8 increas level realism much possibl modern like 12 probabl split render pipelin happen follow way fill z render defer light shadow render particl veget render materi like skin etc use result feed feed run parallel introduc two three frame lag depend light particl veget long system render 60 fp 120 fp much notic obvious one target high make anim look smooth also resolut render higher work physic thing also opportun spread render sever like one z anoth fill diffus normal probabl geometri data differ object later store edg anoth fill terrain data veget render dedic etc etc side rule thumb least 2 core need one probabl better go 3 four four machin 8 16 core eight machin 16 32 core might split sever physic need least much ram ram four 2 need least 16 ram eight need least 32 ram etc resolut consist 3840 2160 pixel occupi four render target per pixel 8888 111110 roughli 12656 number goe mayb probabl save assum might occupi 500 achiev 8 mean even quit busi fill size think split two might make sens pipelin dedic whole mean final switch movi set particl system easili satur 16 ms especi render quarter size resolut light shadow depend number light appli cach shadow data partial resid textur cube map shadow map techniqu hit memori budget card substanti note wrote two year ago time valid solut design render system display anymor post 823 pm 4 comment eight year would like go back redesign exist render system capabl run effici devic display light attach shadow let first see light introduc march 2008 blog point alreadi run one r game eventu ship larg number game also outsid r stalker seri game develop naughti dog time similar approach sinc number modif propos one modif calcul light tile sort light tile execut tile light cover practic implement 11 render battlefield 3 light addit blend buffer consum memori bandwidth approach reduc memori bandwidth consumpt substanti resolv light one tile drawback approach higher minimum runtim cost sort light tile rais rest workload even light render compar older approach break even one render dozen light addit soon light drawn shadow memori bandwidth save neglig newer approach like cluster defer forward shade et start solv light overdraw problem even effici way practic implement shown websit exampl program transpar solut approach mention inconsist way opaqu object handl group peopl wish go back forward render describ refin approach call forward handl light sourc similar approach advantag consist way light transpar opaqu object bought resubmit potenti visibl geometri sever time fill resubmit geometri case forward expens defer light implement fill stage also visibl geometri solv also option make z mean geometri submit one time least modern display devic like tablet smart phone feasibl solut anymor light develop resolut consid state art today consid minimum resolut android devic resolut sever time size even modern monitor resolut increas size therefor cost manifold instead render geometri three four render target overdraw resubmit z need find way store visibl data separ much smaller buffer effici way word could captur visibl geometri small footprint possibl could significantli reduc cost geometri submiss pixel overdraw afterward first idea could done describ articl visibl buffer approach defer shade burn et articl outlin idea store per triangl visibl data visibl buffer post 1056 comment spent time write articl explain resourc bind 12 look first time tough time get head around resourc bind hope articl make other easier understand let know comment post 321 pm 1 comment nearli year time revisit last blog entri sourc code exampl implement still one need releas plan first quarter last year also receiv comment highlight mistak made previou blog post top want add number well look code hour time reserv task turn day bit top get time project manag duti confetti quit enjoy previou blog post forgot mention use measur perform number sever run perform profil alway gener slightli differ result felt overal direct becom clear current setup use current latest driver 1412 sourc code found compar current perform number previou setup previou post becom obviou much chang first three row new chart latest perform number 2015 fourth column two color valu 64 thread number 6770 nearli cut half stay roughli card slight improv first shader fetch two valu devic memori convert lumin store share memori kick parallel reduct sourc code input regist result regist defin 8 defin threadi 16 int int size view port constant buffer well use shader keep comment float detail int diffus shade color quaternion paramet rotat float zoom follow shader appli parallel reduct imag convert lumin defin threadi float threadi 1 void thread group x 1920 16 120 thread group 1080 16 68 index x 1920 goe 0 119 120 thread group 8 thread 960 x index 1080 goe 0 67 68 thread group 16 thread 1080 2 1920 1080 2073600 pixel 120 68 thread 8 16 2 number fetch 2088960 float temp 1 temp wait everyth transfer devic memori share memori 128 thread 64 64 32 32 16 16 8 8 4 4 2 2 1 1 first thread write output 0 write result thread group threadi 2 grid size x 1920 16 1080 16 word number thread group kick dispatch call next shader extend idea fetch four valu fetch four instead two valu devic memori thread group x 1920 16 120 thread group 1080 16 68 index x 1920 goe 0 119 120 thread group 4 thread 480 x index 1080 goe 0 67 68 thread group 16 thread 1080 4 1920 1080 2073600 pixel 120 68 64 number thread 4 16 4 number fetch 2088960 float temp 1 2 3 store share memori temp wait everyth transfer devic memori share memori 32 32 16 16 8 8 4 4 2 2 1 1 look perform result four color valu 64 thread differ perform number signific seem first sign shader might read memori bandwidth limit read memori area take longest time previou write reduc imag 120 x 68 area follow two chart write 60 x 34 area mostli achiev decreas grid size word run less thread group make decreas grid size increas size thread group 256 512 defin 8 defin threadi 32 code thread group x 1920 32 60 thread group 1080 32 34 index x 1920 goe 0 60 thread group 8 thread 480 x index 1080 goe 0 34 thread group 32 thread 1088 4 1920 1080 2073600 pixel 60 34 256 number thread 8 32 4 number fetch 2088960 float temp 1 2 3 store share memori temp wait everyth transfer devic memori share memori 256 thread 128 128 64 64 32 32 16 16 8 8 4 4 2 2 1 1 code next shader decreas grid size even increas number thread thread group 1024 current maximum runtim allow four color valu 1024 thread four color valu 1024 thread perform number chang much compar previou although reduct work dimens target area halv direct sourc code second two fetch four color valu 1024 thread per thread group defin 16 defin threadi 64 constant buffer code follow shader appli parallel reduct imag convert lumin defin threadi float 2 doubl number share slot threadi 1 void thread group x 1920 64 30 thread group 1080 64 17 index x 1920 goe 0 29 30 thread group 16 thread 480 x index 1080 goe 0 16 17 thread group 64 thread 1088 4 index structur buffer 1920 1080 2073600 pixel 30 17 1024 number thread 16 64 4 number fetch 2088960 2 1 1 2 3 wait everyth transfer devic memori share memori 1024 thread 1024 1024 512 512 256 256 128 128 64 64 32 32 16 16 8 8 4 4 2 2 1 1 one thing want tri util doubl amount share memori therefor satur 1024 thread first addit happen share memori end chang much shader util temp regist much replac temp regist use share memori increas perform much last test aim fetch 16 color valu decreas imag result shown last column shader also use 1024 thread fetch share memori like previou one run slower previou sourc code defin 16 defin threadi 64 constant buffer code follow shader appli parallel reduct imag convert lumin defin threadi float 2 doubl number share slot threadi 1 void thread group x 1920 128 15 thread group 1080 128 9 index x 1920 goe 0 14 15 thread group 16 thread 240 x need fetch 8 x direct index 1080 goe 0 8 9 thread group 64 thread 576 need fetch 2 direct 8 2 index structur buffer 1920 1080 2073600 pixel 15 9 1024 number thread 16 64 15 number fetch 2073600 2 1 2 3 4 5 6 7 1 8 9 10 11 12 13 14 15 wait everyth transfer devic memori share memori 1024 thread 1024 1024 512 512 256 256 128 128 64 64 32 32 16 16 8 8 4 4 2 2 1 1 look number seem perform mostli limit speed read sourc buffer moment would like predict reduc sourc resolut would lead differenti view perform mayb someth tri futur post 350 pm 2 comment recent look often comput shader optim platform addit class winter dealt topic talk booth 2014 cover topic blog post cover common scenario implement pipelin parallel reduct use excel talk given mark year back start point enrich new discoveri credit new hardwar platform specif topic cover sequenti share memori access util memori bank layout unrol loop comput shader overhead address arithmet loop instruct skip memori barrier wavefront data share memori exampl accompani blog post show simpl parallel reduct go reduc size imag exampl also reduc color color valu lumin imag 1 go color lumin algorithm level parallel reduct look like approach imag 2 approach parallel reduct instead build fulli recurs kernel possibl current hardwar algorithm mimic recurs use loop see later fact invoc util less thread pool thread thread group impact perform let say alloc 256 thread thread pool first iter parallel reduct algorithm use second iter base implement might use half next one half etc access util memori bank layout one first rule thumb mention deal access pattern use access limit number bank need util effici way turn seem 32 bank imag 3 memori bank arrang linearli address access address 32 apart lead situat thread use bank gener call bank conflict word access address multipl thread creat bank conflict prefer method access 32 thread use 32 differ bank usual extrem exampl mention array exampl want access memori increas bank number first might consid move horizont increas vertic direct way thread hit differ bank often subtl bank conflict happen memori bank access pattern mark shown follow exampl imag depict imag 4 memori bank access interleav first exampl sourc show implement memori access pattern exampl interleav memori access threadi 1 void read structur buffer store share memori wait everyth transfer devic memori share memori 1 2 stride 1 2 4 8 16 32 64 128 int index 2 index first thread write output 0 write result thread group threadi code fetch loop pattern show imag 4 imag sequenti access pattern suppos look like imag 5 memori bank access sequenti sourc code sequenti access version look like threadi 1 void read structur buffer store share memori wait everyth transfer devic memori share memori 2 2 0 1 first thread write output 0 write result thread group threadi chang mark red previou hardwar gener slight chang sourc code impact perform look like modern seem make differ anymor measur done 6770 7750 7850 imag 5 interleav sequenti access pattern case exampl program rearrang access pattern make differ might driver rearrang code alreadi hardwar redirect access unrol loop like overhead shown instruct overhead ancillari instruct load store arithmet instruct core comput word address arithmet loop instruct overhead thread group access thread group share memori automat broken hardwar group thread case call warp 32 thread warp case call wavefront 64 thread wavefront finer level granular regard wavefront wont cover instruct synchron within warp wavefront mean long number thread execut 32 64 memori barrier necessari case tree like algorithm use parallel reduct shown imag 2 number thread util loop decreas soon 32 64 memori barrier necessari anymor mean unrol loop might save ancillari instruct also might reduc number memori barrier use comput shader sourc code unrol loop might look like like previou shader 256 128 128 64 32 64 64 32 32 16 8 4 2 1 perform number optim show older hardwar appreci effort unrol loop decreas number memori barrier newer design imag 6 unrol loop less memori barrier perform impact two color valu share memori look previou shader oper util 256 thread thread group first load share memori fetch two color valu devic memori ad alreadi begin shader could util thread better stay consist previou parallel reduct offer reduct follow shader use 64 thread thread group pack two valu like previou shader store share memori float temp 2 2 1 temp 64 32 32 32 16 8 4 2 1 number thread use 64 memori barrier necessari imag 7 two color valu seem throughout hardwar gener perform benefit fetch two valu time although number thread per thread group reduc 64 256 appreci reduc number thread becom topic later four color valu share memori success stori behind fetch two color valu obviou question aris would happen four valu would fetch keep parallel reduct algorithm compar reduc thread thread group reduc follow shader use 16 thread per thread group therefor consid effici respect offici rule thumb use multipli 64 bright side use memori barrier pack four valu defin 4 defin threadi 4 like previou shader float temp 4 4 1 4 2 4 3 store share memori group barrier temp 64 32 16 8 4 2 1 perform increas compar previou shader show nearli linear increas imag 8 four color valu look improv fetch four instead two color valu bring question would perform chang number thread thread group would increas number thread group dispatch decreas also lead higher parallel reduct result imag smaller next exampl increas number thread 16 64 pack four valu defin 8 defin threadi 8 like previou shader float temp 4 4 1 4 2 4 3 store share memori group barrier temp 64 32 64 32 16 16 8 4 2 1 similar previou shader shader avoid memori barrier run 64 instead 16 thread execut often grid size reduc 60 x 34 imag 9 increas number thread 16 64 decreas size result although number thread increas workload shader also increas due halv size result imag direct word shader work previou allow conclus shader run faster previou one follow success path increas number thread last shader blog post use 256 thread parallel reduc imag size like previou store share memori temp wait everyth transfer devic memori share memori 256 128 128 64 32 64 32 16 8 4 2 1 increas number thread add memori barrier nevertheless shader run quicker previou time work imag 10 increas number thread 64 256 decreas size result pleas note older start beat newer number thread increas overal 6770 went roughli 1 ms close tenth origin time frame 7750 7850 end reduc frame time roughli bit fourth increas workload last two test setup conclus like optim task alway consid tri list thing would worth consid still short give time increas valu reader blog anyth want tri add list pleas let know add blog post overal believ case studi shown give someon good start point optim parallel reduct part pipelin one topic crucial perform pipelin speed blur kernel optim lead ultim blur kernel wait futur blog post thank provid feedback post 219 pm comment older post home subscrib post atom en en 7685999796 160 600 confetti confetti advanc graphic research servic provid video game movi industri confetti work last three year mani like tomb raider battlefield 4 murder soul suspect star citizen dirt 4 vainglori transistor call duti black op 3 battlefield 1 mafia 3 other founder editor pro book seri author sever book articl render regular contributor websit one book edit game develop front line award 2006 advisori board sever compani activ contributor sever futur standard drive game industri find twitter websit view complet profil 2017 1 1 setup 2016 1 august 1 2015 8 1 august 1 1 1 may 2 1 1 2014 6 march 3 3 2013 14 1 2 5 2 may 4 2012 5 2 2 1 2011 8 2 2 1 may 1 march 1 1 2010 3 march 1 1 1 2009 29 3 3 2 1 august 1 2 3 may 2 4 march 2 3 3 2008 51 16 3 4 8 august 1 4 2 may 2 4 march 4 1 2 2007 10 10 post atom post comment atom comment null function function readi reset function open function crook firth ash code fortress graphic rant hock smith morri john john chin shin kyle mike red coder corner van rich rob fernier foe green industri arithmet tom tom simpl theme power blogger 10 blog data 398682525365778708 titl diari graphic programm fals true true fals encod local en en fals fals fals fals graphic programm graphic programm graphic programm true view share platform name get link key link get link target name key share target name key target blog name twitter key twitter share twitter target twitter name key share target name key share target name email key email email target email 300 fals read index diari graphic programm name featur data fals fals true true fals fals name messag data edit edit link copi clipboard post link name templat data name simpl simpl fals fals fals variant name view data classic name classic name magazin name magazin mosaic name mosaic sidebar name sidebar snapshot name snapshot name fals titl diari graphic programm descript type feed fals true fals fals fals true fals fals new null new header null new main null fals fals true new null new null new null new null new null new null new null new null new null"], "h1": ["diari graphic programm"], "h5": [], "h3": ["setup", "2016 filter cull visibl buffer", "blog perform consider resourc bind 12", "implement pro 5 glossi reflect algorithm", "award", "link collect", "game engin", "v buffer defer light rethought", "introduct resourc bind 12", "reload comput shader optim parallel reduct", "comput shader optim parallel reduct"]}